// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"cart/internal/models"
	"cart/internal/services"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IStockServiceMock implements mm_usecase.IStockService
type IStockServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetItemInfo          func(ctx context.Context, skuID models.SKUID) (i1 services.ItemDTO, err error)
	funcGetItemInfoOrigin    string
	inspectFuncGetItemInfo   func(ctx context.Context, skuID models.SKUID)
	afterGetItemInfoCounter  uint64
	beforeGetItemInfoCounter uint64
	GetItemInfoMock          mIStockServiceMockGetItemInfo
}

// NewIStockServiceMock returns a mock for mm_usecase.IStockService
func NewIStockServiceMock(t minimock.Tester) *IStockServiceMock {
	m := &IStockServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetItemInfoMock = mIStockServiceMockGetItemInfo{mock: m}
	m.GetItemInfoMock.callArgs = []*IStockServiceMockGetItemInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIStockServiceMockGetItemInfo struct {
	optional           bool
	mock               *IStockServiceMock
	defaultExpectation *IStockServiceMockGetItemInfoExpectation
	expectations       []*IStockServiceMockGetItemInfoExpectation

	callArgs []*IStockServiceMockGetItemInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IStockServiceMockGetItemInfoExpectation specifies expectation struct of the IStockService.GetItemInfo
type IStockServiceMockGetItemInfoExpectation struct {
	mock               *IStockServiceMock
	params             *IStockServiceMockGetItemInfoParams
	paramPtrs          *IStockServiceMockGetItemInfoParamPtrs
	expectationOrigins IStockServiceMockGetItemInfoExpectationOrigins
	results            *IStockServiceMockGetItemInfoResults
	returnOrigin       string
	Counter            uint64
}

// IStockServiceMockGetItemInfoParams contains parameters of the IStockService.GetItemInfo
type IStockServiceMockGetItemInfoParams struct {
	ctx   context.Context
	skuID models.SKUID
}

// IStockServiceMockGetItemInfoParamPtrs contains pointers to parameters of the IStockService.GetItemInfo
type IStockServiceMockGetItemInfoParamPtrs struct {
	ctx   *context.Context
	skuID *models.SKUID
}

// IStockServiceMockGetItemInfoResults contains results of the IStockService.GetItemInfo
type IStockServiceMockGetItemInfoResults struct {
	i1  services.ItemDTO
	err error
}

// IStockServiceMockGetItemInfoOrigins contains origins of expectations of the IStockService.GetItemInfo
type IStockServiceMockGetItemInfoExpectationOrigins struct {
	origin      string
	originCtx   string
	originSkuID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Optional() *mIStockServiceMockGetItemInfo {
	mmGetItemInfo.optional = true
	return mmGetItemInfo
}

// Expect sets up expected params for IStockService.GetItemInfo
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Expect(ctx context.Context, skuID models.SKUID) *mIStockServiceMockGetItemInfo {
	if mmGetItemInfo.mock.funcGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Set")
	}

	if mmGetItemInfo.defaultExpectation == nil {
		mmGetItemInfo.defaultExpectation = &IStockServiceMockGetItemInfoExpectation{}
	}

	if mmGetItemInfo.defaultExpectation.paramPtrs != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by ExpectParams functions")
	}

	mmGetItemInfo.defaultExpectation.params = &IStockServiceMockGetItemInfoParams{ctx, skuID}
	mmGetItemInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetItemInfo.expectations {
		if minimock.Equal(e.params, mmGetItemInfo.defaultExpectation.params) {
			mmGetItemInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItemInfo.defaultExpectation.params)
		}
	}

	return mmGetItemInfo
}

// ExpectCtxParam1 sets up expected param ctx for IStockService.GetItemInfo
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) ExpectCtxParam1(ctx context.Context) *mIStockServiceMockGetItemInfo {
	if mmGetItemInfo.mock.funcGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Set")
	}

	if mmGetItemInfo.defaultExpectation == nil {
		mmGetItemInfo.defaultExpectation = &IStockServiceMockGetItemInfoExpectation{}
	}

	if mmGetItemInfo.defaultExpectation.params != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Expect")
	}

	if mmGetItemInfo.defaultExpectation.paramPtrs == nil {
		mmGetItemInfo.defaultExpectation.paramPtrs = &IStockServiceMockGetItemInfoParamPtrs{}
	}
	mmGetItemInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetItemInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetItemInfo
}

// ExpectSkuIDParam2 sets up expected param skuID for IStockService.GetItemInfo
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) ExpectSkuIDParam2(skuID models.SKUID) *mIStockServiceMockGetItemInfo {
	if mmGetItemInfo.mock.funcGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Set")
	}

	if mmGetItemInfo.defaultExpectation == nil {
		mmGetItemInfo.defaultExpectation = &IStockServiceMockGetItemInfoExpectation{}
	}

	if mmGetItemInfo.defaultExpectation.params != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Expect")
	}

	if mmGetItemInfo.defaultExpectation.paramPtrs == nil {
		mmGetItemInfo.defaultExpectation.paramPtrs = &IStockServiceMockGetItemInfoParamPtrs{}
	}
	mmGetItemInfo.defaultExpectation.paramPtrs.skuID = &skuID
	mmGetItemInfo.defaultExpectation.expectationOrigins.originSkuID = minimock.CallerInfo(1)

	return mmGetItemInfo
}

// Inspect accepts an inspector function that has same arguments as the IStockService.GetItemInfo
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Inspect(f func(ctx context.Context, skuID models.SKUID)) *mIStockServiceMockGetItemInfo {
	if mmGetItemInfo.mock.inspectFuncGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("Inspect function is already set for IStockServiceMock.GetItemInfo")
	}

	mmGetItemInfo.mock.inspectFuncGetItemInfo = f

	return mmGetItemInfo
}

// Return sets up results that will be returned by IStockService.GetItemInfo
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Return(i1 services.ItemDTO, err error) *IStockServiceMock {
	if mmGetItemInfo.mock.funcGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Set")
	}

	if mmGetItemInfo.defaultExpectation == nil {
		mmGetItemInfo.defaultExpectation = &IStockServiceMockGetItemInfoExpectation{mock: mmGetItemInfo.mock}
	}
	mmGetItemInfo.defaultExpectation.results = &IStockServiceMockGetItemInfoResults{i1, err}
	mmGetItemInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetItemInfo.mock
}

// Set uses given function f to mock the IStockService.GetItemInfo method
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Set(f func(ctx context.Context, skuID models.SKUID) (i1 services.ItemDTO, err error)) *IStockServiceMock {
	if mmGetItemInfo.defaultExpectation != nil {
		mmGetItemInfo.mock.t.Fatalf("Default expectation is already set for the IStockService.GetItemInfo method")
	}

	if len(mmGetItemInfo.expectations) > 0 {
		mmGetItemInfo.mock.t.Fatalf("Some expectations are already set for the IStockService.GetItemInfo method")
	}

	mmGetItemInfo.mock.funcGetItemInfo = f
	mmGetItemInfo.mock.funcGetItemInfoOrigin = minimock.CallerInfo(1)
	return mmGetItemInfo.mock
}

// When sets expectation for the IStockService.GetItemInfo which will trigger the result defined by the following
// Then helper
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) When(ctx context.Context, skuID models.SKUID) *IStockServiceMockGetItemInfoExpectation {
	if mmGetItemInfo.mock.funcGetItemInfo != nil {
		mmGetItemInfo.mock.t.Fatalf("IStockServiceMock.GetItemInfo mock is already set by Set")
	}

	expectation := &IStockServiceMockGetItemInfoExpectation{
		mock:               mmGetItemInfo.mock,
		params:             &IStockServiceMockGetItemInfoParams{ctx, skuID},
		expectationOrigins: IStockServiceMockGetItemInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetItemInfo.expectations = append(mmGetItemInfo.expectations, expectation)
	return expectation
}

// Then sets up IStockService.GetItemInfo return parameters for the expectation previously defined by the When method
func (e *IStockServiceMockGetItemInfoExpectation) Then(i1 services.ItemDTO, err error) *IStockServiceMock {
	e.results = &IStockServiceMockGetItemInfoResults{i1, err}
	return e.mock
}

// Times sets number of times IStockService.GetItemInfo should be invoked
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Times(n uint64) *mIStockServiceMockGetItemInfo {
	if n == 0 {
		mmGetItemInfo.mock.t.Fatalf("Times of IStockServiceMock.GetItemInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetItemInfo.expectedInvocations, n)
	mmGetItemInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetItemInfo
}

func (mmGetItemInfo *mIStockServiceMockGetItemInfo) invocationsDone() bool {
	if len(mmGetItemInfo.expectations) == 0 && mmGetItemInfo.defaultExpectation == nil && mmGetItemInfo.mock.funcGetItemInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetItemInfo.mock.afterGetItemInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetItemInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetItemInfo implements mm_usecase.IStockService
func (mmGetItemInfo *IStockServiceMock) GetItemInfo(ctx context.Context, skuID models.SKUID) (i1 services.ItemDTO, err error) {
	mm_atomic.AddUint64(&mmGetItemInfo.beforeGetItemInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItemInfo.afterGetItemInfoCounter, 1)

	mmGetItemInfo.t.Helper()

	if mmGetItemInfo.inspectFuncGetItemInfo != nil {
		mmGetItemInfo.inspectFuncGetItemInfo(ctx, skuID)
	}

	mm_params := IStockServiceMockGetItemInfoParams{ctx, skuID}

	// Record call args
	mmGetItemInfo.GetItemInfoMock.mutex.Lock()
	mmGetItemInfo.GetItemInfoMock.callArgs = append(mmGetItemInfo.GetItemInfoMock.callArgs, &mm_params)
	mmGetItemInfo.GetItemInfoMock.mutex.Unlock()

	for _, e := range mmGetItemInfo.GetItemInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetItemInfo.GetItemInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItemInfo.GetItemInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItemInfo.GetItemInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetItemInfo.GetItemInfoMock.defaultExpectation.paramPtrs

		mm_got := IStockServiceMockGetItemInfoParams{ctx, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetItemInfo.t.Errorf("IStockServiceMock.GetItemInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetItemInfo.GetItemInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmGetItemInfo.t.Errorf("IStockServiceMock.GetItemInfo got unexpected parameter skuID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetItemInfo.GetItemInfoMock.defaultExpectation.expectationOrigins.originSkuID, *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItemInfo.t.Errorf("IStockServiceMock.GetItemInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetItemInfo.GetItemInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItemInfo.GetItemInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItemInfo.t.Fatal("No results are set for the IStockServiceMock.GetItemInfo")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetItemInfo.funcGetItemInfo != nil {
		return mmGetItemInfo.funcGetItemInfo(ctx, skuID)
	}
	mmGetItemInfo.t.Fatalf("Unexpected call to IStockServiceMock.GetItemInfo. %v %v", ctx, skuID)
	return
}

// GetItemInfoAfterCounter returns a count of finished IStockServiceMock.GetItemInfo invocations
func (mmGetItemInfo *IStockServiceMock) GetItemInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemInfo.afterGetItemInfoCounter)
}

// GetItemInfoBeforeCounter returns a count of IStockServiceMock.GetItemInfo invocations
func (mmGetItemInfo *IStockServiceMock) GetItemInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemInfo.beforeGetItemInfoCounter)
}

// Calls returns a list of arguments used in each call to IStockServiceMock.GetItemInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItemInfo *mIStockServiceMockGetItemInfo) Calls() []*IStockServiceMockGetItemInfoParams {
	mmGetItemInfo.mutex.RLock()

	argCopy := make([]*IStockServiceMockGetItemInfoParams, len(mmGetItemInfo.callArgs))
	copy(argCopy, mmGetItemInfo.callArgs)

	mmGetItemInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemInfoDone returns true if the count of the GetItemInfo invocations corresponds
// the number of defined expectations
func (m *IStockServiceMock) MinimockGetItemInfoDone() bool {
	if m.GetItemInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetItemInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetItemInfoMock.invocationsDone()
}

// MinimockGetItemInfoInspect logs each unmet expectation
func (m *IStockServiceMock) MinimockGetItemInfoInspect() {
	for _, e := range m.GetItemInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IStockServiceMock.GetItemInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetItemInfoCounter := mm_atomic.LoadUint64(&m.afterGetItemInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemInfoMock.defaultExpectation != nil && afterGetItemInfoCounter < 1 {
		if m.GetItemInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IStockServiceMock.GetItemInfo at\n%s", m.GetItemInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IStockServiceMock.GetItemInfo at\n%s with params: %#v", m.GetItemInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetItemInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItemInfo != nil && afterGetItemInfoCounter < 1 {
		m.t.Errorf("Expected call to IStockServiceMock.GetItemInfo at\n%s", m.funcGetItemInfoOrigin)
	}

	if !m.GetItemInfoMock.invocationsDone() && afterGetItemInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to IStockServiceMock.GetItemInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetItemInfoMock.expectedInvocations), m.GetItemInfoMock.expectedInvocationsOrigin, afterGetItemInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IStockServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetItemInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IStockServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IStockServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetItemInfoDone()
}
