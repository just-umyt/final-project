// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"cart/internal/repository"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IPgTxManagerMock implements mm_usecase.IPgTxManager
type IPgTxManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWithTx          func(ctx context.Context, fn func(repository.ICartRepo) error) (err error)
	funcWithTxOrigin    string
	inspectFuncWithTx   func(ctx context.Context, fn func(repository.ICartRepo) error)
	afterWithTxCounter  uint64
	beforeWithTxCounter uint64
	WithTxMock          mIPgTxManagerMockWithTx
}

// NewIPgTxManagerMock returns a mock for mm_usecase.IPgTxManager
func NewIPgTxManagerMock(t minimock.Tester) *IPgTxManagerMock {
	m := &IPgTxManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WithTxMock = mIPgTxManagerMockWithTx{mock: m}
	m.WithTxMock.callArgs = []*IPgTxManagerMockWithTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIPgTxManagerMockWithTx struct {
	optional           bool
	mock               *IPgTxManagerMock
	defaultExpectation *IPgTxManagerMockWithTxExpectation
	expectations       []*IPgTxManagerMockWithTxExpectation

	callArgs []*IPgTxManagerMockWithTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IPgTxManagerMockWithTxExpectation specifies expectation struct of the IPgTxManager.WithTx
type IPgTxManagerMockWithTxExpectation struct {
	mock               *IPgTxManagerMock
	params             *IPgTxManagerMockWithTxParams
	paramPtrs          *IPgTxManagerMockWithTxParamPtrs
	expectationOrigins IPgTxManagerMockWithTxExpectationOrigins
	results            *IPgTxManagerMockWithTxResults
	returnOrigin       string
	Counter            uint64
}

// IPgTxManagerMockWithTxParams contains parameters of the IPgTxManager.WithTx
type IPgTxManagerMockWithTxParams struct {
	ctx context.Context
	fn  func(repository.ICartRepo) error
}

// IPgTxManagerMockWithTxParamPtrs contains pointers to parameters of the IPgTxManager.WithTx
type IPgTxManagerMockWithTxParamPtrs struct {
	ctx *context.Context
	fn  *func(repository.ICartRepo) error
}

// IPgTxManagerMockWithTxResults contains results of the IPgTxManager.WithTx
type IPgTxManagerMockWithTxResults struct {
	err error
}

// IPgTxManagerMockWithTxOrigins contains origins of expectations of the IPgTxManager.WithTx
type IPgTxManagerMockWithTxExpectationOrigins struct {
	origin    string
	originCtx string
	originFn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWithTx *mIPgTxManagerMockWithTx) Optional() *mIPgTxManagerMockWithTx {
	mmWithTx.optional = true
	return mmWithTx
}

// Expect sets up expected params for IPgTxManager.WithTx
func (mmWithTx *mIPgTxManagerMockWithTx) Expect(ctx context.Context, fn func(repository.ICartRepo) error) *mIPgTxManagerMockWithTx {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &IPgTxManagerMockWithTxExpectation{}
	}

	if mmWithTx.defaultExpectation.paramPtrs != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by ExpectParams functions")
	}

	mmWithTx.defaultExpectation.params = &IPgTxManagerMockWithTxParams{ctx, fn}
	mmWithTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWithTx.expectations {
		if minimock.Equal(e.params, mmWithTx.defaultExpectation.params) {
			mmWithTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWithTx.defaultExpectation.params)
		}
	}

	return mmWithTx
}

// ExpectCtxParam1 sets up expected param ctx for IPgTxManager.WithTx
func (mmWithTx *mIPgTxManagerMockWithTx) ExpectCtxParam1(ctx context.Context) *mIPgTxManagerMockWithTx {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &IPgTxManagerMockWithTxExpectation{}
	}

	if mmWithTx.defaultExpectation.params != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Expect")
	}

	if mmWithTx.defaultExpectation.paramPtrs == nil {
		mmWithTx.defaultExpectation.paramPtrs = &IPgTxManagerMockWithTxParamPtrs{}
	}
	mmWithTx.defaultExpectation.paramPtrs.ctx = &ctx
	mmWithTx.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWithTx
}

// ExpectFnParam2 sets up expected param fn for IPgTxManager.WithTx
func (mmWithTx *mIPgTxManagerMockWithTx) ExpectFnParam2(fn func(repository.ICartRepo) error) *mIPgTxManagerMockWithTx {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &IPgTxManagerMockWithTxExpectation{}
	}

	if mmWithTx.defaultExpectation.params != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Expect")
	}

	if mmWithTx.defaultExpectation.paramPtrs == nil {
		mmWithTx.defaultExpectation.paramPtrs = &IPgTxManagerMockWithTxParamPtrs{}
	}
	mmWithTx.defaultExpectation.paramPtrs.fn = &fn
	mmWithTx.defaultExpectation.expectationOrigins.originFn = minimock.CallerInfo(1)

	return mmWithTx
}

// Inspect accepts an inspector function that has same arguments as the IPgTxManager.WithTx
func (mmWithTx *mIPgTxManagerMockWithTx) Inspect(f func(ctx context.Context, fn func(repository.ICartRepo) error)) *mIPgTxManagerMockWithTx {
	if mmWithTx.mock.inspectFuncWithTx != nil {
		mmWithTx.mock.t.Fatalf("Inspect function is already set for IPgTxManagerMock.WithTx")
	}

	mmWithTx.mock.inspectFuncWithTx = f

	return mmWithTx
}

// Return sets up results that will be returned by IPgTxManager.WithTx
func (mmWithTx *mIPgTxManagerMockWithTx) Return(err error) *IPgTxManagerMock {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &IPgTxManagerMockWithTxExpectation{mock: mmWithTx.mock}
	}
	mmWithTx.defaultExpectation.results = &IPgTxManagerMockWithTxResults{err}
	mmWithTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWithTx.mock
}

// Set uses given function f to mock the IPgTxManager.WithTx method
func (mmWithTx *mIPgTxManagerMockWithTx) Set(f func(ctx context.Context, fn func(repository.ICartRepo) error) (err error)) *IPgTxManagerMock {
	if mmWithTx.defaultExpectation != nil {
		mmWithTx.mock.t.Fatalf("Default expectation is already set for the IPgTxManager.WithTx method")
	}

	if len(mmWithTx.expectations) > 0 {
		mmWithTx.mock.t.Fatalf("Some expectations are already set for the IPgTxManager.WithTx method")
	}

	mmWithTx.mock.funcWithTx = f
	mmWithTx.mock.funcWithTxOrigin = minimock.CallerInfo(1)
	return mmWithTx.mock
}

// When sets expectation for the IPgTxManager.WithTx which will trigger the result defined by the following
// Then helper
func (mmWithTx *mIPgTxManagerMockWithTx) When(ctx context.Context, fn func(repository.ICartRepo) error) *IPgTxManagerMockWithTxExpectation {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("IPgTxManagerMock.WithTx mock is already set by Set")
	}

	expectation := &IPgTxManagerMockWithTxExpectation{
		mock:               mmWithTx.mock,
		params:             &IPgTxManagerMockWithTxParams{ctx, fn},
		expectationOrigins: IPgTxManagerMockWithTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWithTx.expectations = append(mmWithTx.expectations, expectation)
	return expectation
}

// Then sets up IPgTxManager.WithTx return parameters for the expectation previously defined by the When method
func (e *IPgTxManagerMockWithTxExpectation) Then(err error) *IPgTxManagerMock {
	e.results = &IPgTxManagerMockWithTxResults{err}
	return e.mock
}

// Times sets number of times IPgTxManager.WithTx should be invoked
func (mmWithTx *mIPgTxManagerMockWithTx) Times(n uint64) *mIPgTxManagerMockWithTx {
	if n == 0 {
		mmWithTx.mock.t.Fatalf("Times of IPgTxManagerMock.WithTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWithTx.expectedInvocations, n)
	mmWithTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWithTx
}

func (mmWithTx *mIPgTxManagerMockWithTx) invocationsDone() bool {
	if len(mmWithTx.expectations) == 0 && mmWithTx.defaultExpectation == nil && mmWithTx.mock.funcWithTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWithTx.mock.afterWithTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWithTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WithTx implements mm_usecase.IPgTxManager
func (mmWithTx *IPgTxManagerMock) WithTx(ctx context.Context, fn func(repository.ICartRepo) error) (err error) {
	mm_atomic.AddUint64(&mmWithTx.beforeWithTxCounter, 1)
	defer mm_atomic.AddUint64(&mmWithTx.afterWithTxCounter, 1)

	mmWithTx.t.Helper()

	if mmWithTx.inspectFuncWithTx != nil {
		mmWithTx.inspectFuncWithTx(ctx, fn)
	}

	mm_params := IPgTxManagerMockWithTxParams{ctx, fn}

	// Record call args
	mmWithTx.WithTxMock.mutex.Lock()
	mmWithTx.WithTxMock.callArgs = append(mmWithTx.WithTxMock.callArgs, &mm_params)
	mmWithTx.WithTxMock.mutex.Unlock()

	for _, e := range mmWithTx.WithTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWithTx.WithTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWithTx.WithTxMock.defaultExpectation.Counter, 1)
		mm_want := mmWithTx.WithTxMock.defaultExpectation.params
		mm_want_ptrs := mmWithTx.WithTxMock.defaultExpectation.paramPtrs

		mm_got := IPgTxManagerMockWithTxParams{ctx, fn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWithTx.t.Errorf("IPgTxManagerMock.WithTx got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithTx.WithTxMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.fn != nil && !minimock.Equal(*mm_want_ptrs.fn, mm_got.fn) {
				mmWithTx.t.Errorf("IPgTxManagerMock.WithTx got unexpected parameter fn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithTx.WithTxMock.defaultExpectation.expectationOrigins.originFn, *mm_want_ptrs.fn, mm_got.fn, minimock.Diff(*mm_want_ptrs.fn, mm_got.fn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWithTx.t.Errorf("IPgTxManagerMock.WithTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWithTx.WithTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWithTx.WithTxMock.defaultExpectation.results
		if mm_results == nil {
			mmWithTx.t.Fatal("No results are set for the IPgTxManagerMock.WithTx")
		}
		return (*mm_results).err
	}
	if mmWithTx.funcWithTx != nil {
		return mmWithTx.funcWithTx(ctx, fn)
	}
	mmWithTx.t.Fatalf("Unexpected call to IPgTxManagerMock.WithTx. %v %v", ctx, fn)
	return
}

// WithTxAfterCounter returns a count of finished IPgTxManagerMock.WithTx invocations
func (mmWithTx *IPgTxManagerMock) WithTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTx.afterWithTxCounter)
}

// WithTxBeforeCounter returns a count of IPgTxManagerMock.WithTx invocations
func (mmWithTx *IPgTxManagerMock) WithTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTx.beforeWithTxCounter)
}

// Calls returns a list of arguments used in each call to IPgTxManagerMock.WithTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWithTx *mIPgTxManagerMockWithTx) Calls() []*IPgTxManagerMockWithTxParams {
	mmWithTx.mutex.RLock()

	argCopy := make([]*IPgTxManagerMockWithTxParams, len(mmWithTx.callArgs))
	copy(argCopy, mmWithTx.callArgs)

	mmWithTx.mutex.RUnlock()

	return argCopy
}

// MinimockWithTxDone returns true if the count of the WithTx invocations corresponds
// the number of defined expectations
func (m *IPgTxManagerMock) MinimockWithTxDone() bool {
	if m.WithTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WithTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WithTxMock.invocationsDone()
}

// MinimockWithTxInspect logs each unmet expectation
func (m *IPgTxManagerMock) MinimockWithTxInspect() {
	for _, e := range m.WithTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IPgTxManagerMock.WithTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWithTxCounter := mm_atomic.LoadUint64(&m.afterWithTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WithTxMock.defaultExpectation != nil && afterWithTxCounter < 1 {
		if m.WithTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to IPgTxManagerMock.WithTx at\n%s", m.WithTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to IPgTxManagerMock.WithTx at\n%s with params: %#v", m.WithTxMock.defaultExpectation.expectationOrigins.origin, *m.WithTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWithTx != nil && afterWithTxCounter < 1 {
		m.t.Errorf("Expected call to IPgTxManagerMock.WithTx at\n%s", m.funcWithTxOrigin)
	}

	if !m.WithTxMock.invocationsDone() && afterWithTxCounter > 0 {
		m.t.Errorf("Expected %d calls to IPgTxManagerMock.WithTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WithTxMock.expectedInvocations), m.WithTxMock.expectedInvocationsOrigin, afterWithTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IPgTxManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWithTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IPgTxManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IPgTxManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWithTxDone()
}
